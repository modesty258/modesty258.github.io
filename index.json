[{"content":"​\nzip常见文件头 伪加密 50 4B .PK\n原理：ZIP伪加密是在文件头的加密标志位进行修改，进而再次打开文件时被识别为加密压缩包。\nZIP文件主要由三个部分组成：压缩源文件数据区 + 核心目录 + 目录结束标志\n压缩源文件数据区\nlocal file header + file data + data descriptor **local file header：**文件头用于标识该文件的开始，记录了该压缩文件的信息，这里的文件头标识由固定值 50 4B 03 04 开头，也是 ZIP 的文件头的重要标志。\n**file data：**文件数据记录了相应压缩文件的数据。\n**data descriptor：**数据描述符用于标识该文件压缩结束，该结构只有在相应的 local file header 中通用标记字段的第 3 bit设为 1 时才会出现，紧接在压缩文件源数据后。\n50 4B 03 04：这是头文件标记（0x04034b50）\n14 00：解压文件所需 pkware 版本\n00 00：全局方式位标记（有无加密）\n08 00：压缩方式\n5A 7E：最后修改文件时间\nF7 46：最后修改文件日期\n16 B5 80 14：CRC-32校验（1480B516）\n19 00 00 00：压缩后尺寸（25）\n17 00 00 00：未压缩尺寸（23）\n07 00：文件名长度\n00 00：扩展记录长度\n伪加密修改的几种方法 360直接通杀 检测伪加密的工具，zipcenop解密后可以直接打开，打不开就不是伪加密 使用010等工具修改 暴力破解 推荐工具：ARCHPR\n掩码攻击 原理:已知密码的某一位，可以构造??a???进项掩码攻击\n例题 明文攻击 原理：因为同一个压缩包使用同一个加密密钥来加密，所以可以使用已知文件来解出其他加密文件。\ncrc32碰撞 docx文件 包含xml文件的zip文件，可以看到开头就是504B\nwp misc 2 这是一道伪加密，利用的是修改文件头的加密标志位来达到使压缩包产生密码的效果\n这一道题的标志位就特别明显，就是在pk后面的14，14后第二位应该是00，但是修改为其他，就造成了加密\n只需要将这些09改为00，就可以去除加密，但是我手动改完后显示文件损坏，就先用工具破解了\n![修改后](E:\\Myblog\\blog\\content\\posts\\misc\\压缩包\\1 (2).png)\nzipcenop 使用工具后还是显示文件损坏，就知道应该不是揭秘出错，而是存在作者的修改，需要文件修复（我猜的）\n看到文件中有6个小文件，我就来试试直接破解，当然是妄想天开\n","permalink":"https://modesty258.github.io/posts/misc/%E5%8E%8B%E7%BC%A9%E5%8C%85/","summary":"​ zip常见文件头 伪加密 50 4B .PK 原理：ZIP伪加密是在文件头的加密标志位进行修改，进而再次打开文件时被识别为加密压缩包。 ZIP文件主要由三个部分组成：压缩源文件数据区 + 核心目录 + 目录结束标志 压缩源文件数据区 local file header + file data + data descriptor **local file header：**文件头用于标识该文件的开始，记录了该","title":"压缩包"},{"content":"​\n文件分离工具及使用方法 foremost 基本命令 foremost 文件名\n执行命令后，会在当前文件夹生成output\n也可以直接把需要分离的文件拖到foremost，目前我的windows上比较难用，准备研究一下linux的用法\nbinwalk wp 第一个文件是一个图片，很简单，就是基本的一个隐写，直接用foremost分离了就出来了。\nflag{E0D6DEE1-33F0-42E1-9609-ECDFFFE5276C}\n","permalink":"https://modesty258.github.io/posts/misc/%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/","summary":"​ 文件分离工具及使用方法 foremost 基本命令 foremost 文件名 执行命令后，会在当前文件夹生成output 也可以直接把需要分离的文件拖到foremost，目前我的windows上比较难用，准备研究一下linux的用法 binwalk wp 第一个文件是一个图片，很简单，就是基本的一个隐写，直接用foremost分离了就出","title":"文件分割"},{"content":"使用Git更新Hugo 个人博客 该文章主要是讨论，如何在本地搭建好hugo静态网页后，上传git到自己的域名下。而且每天进行实时更新。\n第一次git push hugo # 生成public cd public git init git remote add origin https://github.com/xxx/xxx.github.io #填写自己的域名 git add . git commit -m \u0026#34;hugo\u0026#34; git push -u origin master 这个基本都会了，不然网站也没法使用\n第二次push 为什么要第二次，很简单，就是如何更新你的博客，当你在本地生成的新的文章，就得上传到网站\n#进入到根目录下 hugo #假设你已经完成.md更新 # 第二次生成public cd public git init git remote add origin https://github.com/xxx/xxx.github.io #填写自己的域名 git add -A git commit -m \u0026#34;update-hugo\u0026#34; git push origin master # git push -f origin master（实在传不上去的时候用，记得备份） 一键部署 ","permalink":"https://modesty258.github.io/posts/blog/%E4%BD%BF%E7%94%A8git%E6%9B%B4%E6%96%B0hugo%E4%B8%AA%E4%BA%BAblog/","summary":"使用Git更新Hugo 个人博客 该文章主要是讨论，如何在本地搭建好hugo静态网页后，上传git到自己的域名下。而且每天进行实时更新。 第一次git push hugo # 生成public cd public git init git remote add origin https://github.com/xxx/xxx.github.io #填写自己的域名 git add . git commit -m \u0026#34;hugo\u0026#34; git push -u origin master 这个基本都会了，不然网站也没法使用 第二次push 为什么要","title":"使用git更新hugo个人blog"},{"content":"​\n常见编码特征 粘个链接：[30种常见编码]https://cloud.tencent.com/developer/article/1748394\n在线解码：https://ctf.bugku.com/tools.html\nbase家族 base16 base32 base58 base62 base64 base91 base91 base100\n1. Base64——示例YWRtaW4tcm9vdA== 一般尾部会带两个等号，明文少的可以没有\n原理：转化为ascil码\u0026mdash;转化为二进制\u0026mdash;8位变6位\u0026mdash;6位补零\u0026ndash;转化为十进制\u0026mdash;-ascil码对照 如果剩下的字符不足3个字节，则用0填充，输出字符使用‘=’，因此编码后输出的文本末尾可能会出现1或2个‘=’\nbase64与url转化问题 有时为了绕过，会使用base64读取，但是url有时会将标准Base64中的“/”和“+”字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换，因为ANSI SQL中已将“%”号用作通配符\n解决：可以使用改进后的base64，将“/”和“+”字符改成了“-”和“_”，就会避免上面的问题\nBase64转换后比原有的字符串长1/3 因为由八字节转化为六字节，再补两个高位零，这样理论会多出三分之一\nBase64转换，最好是不要用在加密上，尤其是参数加密，很容易出问题\n2. Base58——示例6tmHCZvhgfNjQu 最大的特点就是没有等号\nBase58是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。\n相比Base64，Base58不使用数字\u0026quot;0\u0026quot;，字母大写\u0026quot;O\u0026quot;，字母大写\u0026quot;I\u0026quot;，和字母小写\u0026quot;l\u0026quot;，以及\u0026quot;+“和”/\u0026ldquo;符号。\n比特币的Base58字母表：\n123456789\nABCDEFGHJKLMNPQRSTUVWXYZ\nabcdefghijkmnopqrstuvwxyz\n简单的说：Base58一种编码方式，跟十进制，十六进制一样，不过更短更省空间。\n可以理解为58进制，但是去除了0（数字0）、O（o的大写字母）、l（ L的小写字母）、I（i的大写字母）\n3.Base32——示例GEZDGNBVGY3TQOJQGE====== 明文超过10个以后就会有很多的等号\n填充“=”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“=”符号\n原理：与base64差不多，将原来的二进制分为5位，然后高位加0变成8位。如果不是5和8的公因数就会补充0 字母表:\n0 A 8 I 16 Q 24 Y 1 B 9 J 17 R 25 Z 2 C 10 K 18 S 26 2 3 D 11 L 19 T 27 3 4 E 12 M 20 U 28 4 5 F 13 N 21 V 29 5 6 G 14 O 22 W 30 6 7 H 15 P 23 X 31 7 无大小写，基本全是大写或小写 可以作为文件名，不含符号 排除了一些字符 忽略了数字“1”、“8”和“0”，因为它们可能与字母“I”，“B”和“O”混淆 4.Base16——示例61646D696E 它的特点是没有等号并且数字要多于字母\n原理： Base16编码是一个标准的十六进制字符串（注意是字符串而不是数值），更易被人类和计算机使用，因为它并不包含任何控制字符，以及Base64和Base32中的“=”符号。\n字母表：0123456789ABCDEF\n5.Base85——示例Ao(mgHZs%;@rH3q+EVNE@ru=2 特点是奇怪的字符比较多，但是很难出现等号\n6.base91——示例@iH\u0026lt;,{)eG$7\u0026amp;G9jLrrh+=[j;H 上面的是同一个字符输出的base85和base91，还是有一定的区别的，大不了两个都试试\n6.Base100——示例👘👛👤👠👥 特点就是一堆Emoji表情\nBase100编码/解码工具（又名：Emoji表情符号编码/解码），可将文本内容编码为Emoji表情符号；同时也可以将编码后的Emoji表情符号内容解码为文本。\n进制 url 图片码 wp 2i9Q8AtDo5oMZd6UQrvegggb4o9qMrcNk5syu5dCyGcXfoSwXhtujiJwDv Fa+33_\u0026amp;6M7_#+*Dl~Rqbm]5psR$/ix$qCgDFx4m6?42+Qw.S7wy=d`3H05EQ]Zoa+U,\u0026lt;q40S2Nx0TCmY8w;=0;@6xP+cj+EYWG?cO:suHUc.=8\u0026amp;S|wfcA_3X(M0/fb$R0X(Il)\u0026amp;GlNMX@DgXI#oxij{i5UkbO[iS[Op;F[2SI%%7Pmbp$i(dG![5tV\u0026lt;gmN1b3O(I.[me,6l\u0026lt;,mWo\u0026#34;/r=8.1v\u0026lt;1.Io^\u0026gt;aY%+JG[\u0026gt;uWNh*~E!RL#4J91*N@1KK]Z.Tti5zDun#\u0026gt;I3\u0026lt;gQWi6Re3Z`PH!Li.LP}pkw;d=[g@$Meigb2byfe0jopB+NdwOlAkpR(F+wZ*BJ6LLmSi9%xz(i#pxP//g,yiW2`Ei0hvePTYwDAdl,Td]m`pG 🐬👘🐭👛🐮🐯🐭🐯🐬👘🐪🐪🐮🐫🐫🐬🐫👝🐬🐫🐫👜🐫🐪🐫👜🐬🐫🐫👘🐫🐪🐬🐨🐭🐰🐪🐨🐫🐫🐬🐨🐮👘🐭🐮🐮🐯🐫👚🐬🐫🐬🐩🐫🐬🐬🐩🐫🐬🐬🐰🐮🐫🐬🐨🐬🐬🐬🐰🐮👘🐬🐨🐬🐪🐪🐧🐪🐬🐫👜🐬🐫🐭👚🐫🐬🐫👜🐭👘🐬🐭🐫🐮🐬🐩🐫🐫🐭👙🐪🐨🐫👜🐫🐫🐫👘🐪🐰 Zns5NkE1QS1FQjNsZzc5OEUtQ0Q0My1FOUE2M0Y4N31hMDQxLThEMDJD 1 ‌2i9Q8AtDo5oMZd6UQrvegggb4o9qMrcNk5syu5dCyGcXfoSwXhtujiJwDv\n先试了试base64，发现并不是，看到里面没有“i,O，l”这些特征字母，判断应该是base58，试了试\nflag{9B1BD979-39BF-48CD-B427-FF748A4C41E9} ok\n2 Fa+33_\u0026amp;6M7_#+*Dl~Rqbm]5psR$/ix$qCgDFx4m6?42+Qw.S7wy=d`3H05EQ]Zoa+U,\u0026lt;q40S2Nx0TCmY8w;=0;@6xP+cj+EYWG?cO:suHUc.=8\u0026amp;S|wfcA_3X(M0/fb$R0X(Il)\u0026amp;GlNMX@DgXI#oxij{i5UkbO[iS[Op;F[2SI%%7Pmbp$i(dG![5tV\u0026lt;gmN1b3O(I.[me,6l\u0026lt;,mWo\u0026quot;/r=8.1v\u0026lt;1.Io^\u0026gt;aY%+JG[\u0026gt;uWNh*~E!RL#4J91*N@1KK]Z.Tti5zDun#\u0026gt;I3\u0026lt;gQWi6Re3Z`PH!Li.LP}pkw;d=[g@$Meigb2byfe0jopB+NdwOlAkpR(F+wZ*BJ6LLmSi9%xz(i#pxP//g,yiW2`Ei0hvePTYwDAdl,Td]m`pG\n又乱又杂，字母大小写，数字，符号都有，结合特征感觉是base91，试了试\nCizNxpZPsm3Vidf81ufwcftctybK9dPbzC12Ht5K1rSyZqGiKM2KbgiKPMSMZe2pELQuwkwjXtTAfD8bHqiC8rhshE5gqBqw2tHN4nZ2ahcDa2ALrPXhBmv2N26VuzS6G4KEZCsN3rujdsuVLRAXJJzXW1qN1ecLthUNSvrsrMZqSgu82AFjgL37oDsTXKPqqH2pvmPLrr21GMJ8CLKvAFk2v6taaEfuByFqBt3XYw4QSatHNHhXnzN7KSn9BPNZbMcf4FAXEPL3FHcCaXWJf1igXxtWFbH38xJk8W6QPxRbYLQ7tg\n再看这是什么编码，大小写，base64，不对再试base58\nKZVES53FIU2UQUTLMRUU2M2COFKFITSDKZDGYWCNKU4U4TKWJJMFMV3TGFKDCSTSK5WFMVKWK5UDGVSEIF4FE2ZVKZLGYVSTMJCXAVKWKZJEOURSJZLVO3DMKZREK4DPLFKE4Q2SGFNEOV3LGVVU23CGGRKTENKHKYYWISDFIU4VOYJRLJEFI3LYKNLGYVTVKNWXQU2WIZKXSVTMMR3WG3CCKJIFIMB5\n全大写，base16或base32，但是字母特别多大概率不是base16\nVjIweE5HRkdiM3BqTTNCVFlXMU9NMVJXVWs1T1JrWlVUVWh3VDAxRk5VVlVSbEpUVVRGR2NWWllVbEpoYTNCR1ZGWk5kMlF4U25GV1dHeE9Wa1ZHTmxSVlVuSmxSVFUyVldwclBRPT0=\nbase32可以出来，大小写加等号，base64？\n果然是base64，只是进行了三次套娃，一次一次解出来就行了\nflag{3F70138A-37CC-4BB5-B2D1-0F5210309174}\n3 🐬👘🐭👛🐮🐯🐭🐯🐬👘🐪🐪🐮🐫🐫🐬🐫👝🐬🐫🐫👜🐫🐪🐫👜🐬🐫🐫👘🐫🐪🐬🐨🐭🐰🐪🐨🐫🐫🐬🐨🐮👘🐭🐮🐮🐯🐫👚🐬🐫🐬🐩🐫🐬🐬🐩🐫🐬🐬🐰🐮🐫🐬🐨🐬🐬🐬🐰🐮👘🐬🐨🐬🐪🐪🐧🐪🐬🐫👜🐬🐫🐭👚🐫🐬🐫👜🐭👘🐬🐭🐫🐮🐬🐩🐫🐫🐭👙🐪🐨🐫👜🐫🐫🐫👘🐪🐰\nbase100,直接上。\n5a6d78685a3374454f544e434e544a4351693144517a67784c545245524559745155597a515330354e546c454e6a564752446b314e444a39\n这个特征就很明显了，最大字符不超过f，而且数字占了大多部分，应该就是base16\nZmxhZ3tEOTNCNTJCQi1DQzgxLTREREYtQUYzQS05NTlENjVGRDk1NDJ9\n有大小写，有0 有\u0026rsquo;O\u0026rsquo;,base64直接出\nflag{D93B52BB-CC81-4DDF-AF3A-959D65FD9542}\n4 Zns5NkE1QS1FQjNsZzc5OEUtQ0Q0My1FOUE2M0Y4N31hMDQxLThEMDJD\n直接base64解出来\nf{96A5A-EB3lg798E-CD43-E9A63F87}a041-8D02C\n你要问我有没有猫腻，我也不知道\nflag{96A5A-EB3798E-CD43-E9A63F87041-8D02C}\n","permalink":"https://modesty258.github.io/posts/misc/%E7%BC%96%E7%A0%81/","summary":"​ 常见编码特征 粘个链接：[30种常见编码]https://cloud.tencent.com/developer/article/1748394 在线解码：https://ctf.bugku.com/tools.html base家族 base16 base32 base58 base62 base64 base91 base91 base100 1. Base64——示例YWRtaW","title":"编码"},{"content":"import os import xlrd import datetime import time from mailmerge import MailMerge from xlrd import xldate_as_datetime, xldate_as_tuple from docx import Document from docx.shared import Inches from docx.oxml.ns import qn from docx.enum.text import WD_ALIGN_PARAGRAPH def center_insert_img(doc, img1, img2): \u0026#34;\u0026#34;\u0026#34;插入图片\u0026#34;\u0026#34;\u0026#34; tables = doc.tables tab_2 = tables[0].rows[65].cells[30] ph_img2 = tab_2.paragraphs[0] run_img2 = ph_img2.add_run(\u0026#39;\u0026#39;) run_img2.add_picture(img2) tab_1 = tables[0].rows[65].cells[6] ph_img1 = tab_1.paragraphs[0] run_img1 = ph_img1.add_run(\u0026#39;\u0026#39;) run_img1.add_picture(img1) def save_img_to_doc(img1,img2,tpl_doc,res_doc): \u0026#34;\u0026#34;\u0026#34;把图片保存到doc文件中的指定位置\u0026#34;\u0026#34;\u0026#34; # 打开模板文件 document = Document(tpl_doc) # 插入图片居中 center_insert_img(document, img1,img2) # 保存结果文件 document.save(res_doc) import zipfile from PIL import Image import os import re def get_img_from_excel(test_file): new_file = test_file.replace(\u0026#34;.xlsx\u0026#34;,\u0026#34;.zip\u0026#34;) os.rename(test_file,new_file) azip = zipfile.ZipFile(new_file) namelist = (azip.namelist()) print(namelist) img_name = 1 for idx in range(0,len(namelist)): if \u0026#39;media\u0026#39; in namelist[idx] and \u0026#39;jpeg\u0026#39; in namelist[idx]: f = azip.open(namelist[idx]) img = Image.open(f) img = img.convert(\u0026#34;RGB\u0026#34;) print(img_name) img.save(\u0026#39;image\u0026#39;+str(img_name)+\u0026#39;.jpeg\u0026#39;,\u0026#34;jpeg\u0026#34;) img_name += 1 azip.close() def remvocePiont(str_in): # index = str.find(\u0026#34;.\u0026#34;) # return str[0:index] str_in = str(str_in) str_in = str_in.replace(\u0026#39;null\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;NULL\u0026#39;, \u0026#39;\u0026#39;) if str_in.strip() == \u0026#39;\u0026#39;: str_in = \u0026#39;/\u0026#39; return str_in def get_level(b_74_1): if b_74_1 == \u0026#39;\u0026#39;: return b_74_1 b_74_1 = b_74_1.replace(\u0026#39;null\u0026#39;, \u0026#39;2类\u0026#39;) # print(b_74_1) b_74_1 = b_74_1.split(\u0026#39;:\u0026#39;)[1] b_74_1 = b_74_1.split(\u0026#39; \u0026#39;)[0] if \u0026#39;类类\u0026#39; in b_74_1: b_74_1 = b_74_1[:-1] return b_74_1 def get_next_year(b_76_1): if b_76_1 == \u0026#39;\u0026#39;: return b_76_1 b_76_1 = b_76_1.split(\u0026#39;-\u0026#39;)[0] b_76_1 = int(b_76_1) + 1 return b_76_1 print(\u0026#34;------------WORD保存路径-------------------\u0026#34;) print(\u0026#34;转换成功后的WORD文件保存在 :\u0026#34; + r\u0026#34;D:\\desk\\out\u0026#34;) print(\u0026#34;-------------------------------\u0026#34;) # path = input(\u0026#34;请输入excel文件路径+文件名（如：D:\\Desktop\\data.xlsx）：\u0026#34;) # path_dir = r\u0026#39;D:\\Users\\Modesty\\Desktop\\工作\\京昆高速桥梁卡片\u0026#39;) path_dir = r\u0026#39;D:\\desk\\zuoye\\1\\2\u0026#39; for path in os.listdir(path_dir): print(\u0026#34;开始转换，请稍等······ \u0026#34;) path = path_dir + \u0026#39;\\\\\u0026#39; + path print(path) # path = r\u0026#39;C:\\Users\\liujie\\Desktop\\1\\G5Z001EL0010京周路立交A匝道桥(右幅)卡片_2.xlsx\u0026#39; # C:\\Users\\liujie\\Desktop\\1\\G5Z001EL0010京周路立交A匝道桥(右幅)卡片_2.xlsx xl = xlrd.open_workbook(path) # 读取第一个表 table = xl.sheet_by_name(xl.sheet_names()[0]) # 获取表中行数 nrows = table.nrows # 生成Word文档存储目录 template_path = \u0026#34;template_3.docx\u0026#34; doc = MailMerge(template_path) # 打开模板文件 title = table.row_values(0)[0] a_0 = table.row_values(1)[3] b_1 = table.row_values(3)[2] b_2 = table.row_values(3)[5] b_3 = table.row_values(3)[8] b_4 = table.row_values(4)[2] b_5 = table.row_values(4)[5] b_6 = table.row_values(4)[8] b_7 = table.row_values(5)[2] if b_7.strip() == \u0026#39;\u0026#39;: b_7 = \u0026#39;公路桥梁\u0026#39; b_8 = table.row_values(5)[5] b_9 = table.row_values(5)[8] b_10 = table.row_values(6)[2] b_11 = table.row_values(6)[5] b_12 = table.row_values(6)[8] b_13 = table.row_values(7)[2] b_14 = table.row_values(7)[5] b_15 = table.row_values(7)[8] b_16 = table.row_values(8)[2] b_17 = table.row_values(8)[5] b_18 = table.row_values(8)[8] b_19 = table.row_values(10)[2] b_20 = table.row_values(10)[5] b_21 = table.row_values(10)[8] b_22 = table.row_values(11)[2] b_23 = table.row_values(11)[5] b_24 = table.row_values(11)[8] b_25 = table.row_values(12)[2] b_26 = table.row_values(12)[5] b_27 = table.row_values(12)[8] b_28 = table.row_values(13)[2] b_29 = table.row_values(13)[5] b_30 = table.row_values(13)[8] b_31 = table.row_values(14)[2] b_32 = table.row_values(14)[5] b_33 = table.row_values(14)[8] b_34 = table.row_values(15)[7] b_35 = table.row_values(17)[2] b_36 = table.row_values(18)[2] b_37 = table.row_values(19)[3] b_38 = table.row_values(20)[3] b_39 = table.row_values(21)[3] b_40 = table.row_values(22)[3] b_41 = table.row_values(23)[3] b_42 = table.row_values(24)[3] b_43 = table.row_values(25)[3] b_44 = table.row_values(26)[3] b_45 = table.row_values(27)[3] b_46 = table.row_values(28)[3] b_47 = table.row_values(29)[3] b_48 = table.row_values(30)[3] b_49 = table.row_values(31)[3] b_50 = table.row_values(32)[3] b_51 = table.row_values(33)[3] b_52 = table.row_values(34)[3] b_53 = table.row_values(35)[3] b_54 = table.row_values(36)[3] b_55 = table.row_values(37)[3] b_56 = table.row_values(38)[3] b_57 = table.row_values(39)[3] b_58 = table.row_values(40)[3] b_59 = table.row_values(41)[3] # 读取第二个表 table = xl.sheet_by_name(xl.sheet_names()[1]) b_60 = table.row_values(1)[2] b_61 = table.row_values(1)[5] b_62 = table.row_values(1)[8] b_63 = table.row_values(2)[2] b_64 = table.row_values(2)[5] b_65 = table.row_values(2)[8] b_66 = table.row_values(3)[2] b_67 = table.row_values(3)[5] b_68 = table.row_values(3)[8] b_69 = table.row_values(4)[2] b_70 = table.row_values(4)[5] b_71 = table.row_values(4)[8] b_72_1 = table.row_values(8)[0] b_72_2 = table.row_values(9)[0] b_72_3 = table.row_values(10)[0] b_72_4 = table.row_values(11)[0] b_72_5 = table.row_values(12)[0] b_72_6 = table.row_values(13)[0] b_72_7 = table.row_values(14)[0] b_72_8 = table.row_values(15)[0] b_73_1 = table.row_values(8)[2] b_73_2 = table.row_values(9)[2] b_73_3 = table.row_values(10)[2] b_73_4 = table.row_values(11)[2] b_73_5 = table.row_values(12)[2] b_73_6 = table.row_values(13)[2] b_73_7 = table.row_values(14)[2] b_73_8 = table.row_values(15)[2] b_74_1 = get_level(table.row_values(8)[3]) b_74_2 = get_level(table.row_values(9)[3]) b_74_3 = get_level(table.row_values(10)[3]) b_74_4 = get_level(table.row_values(11)[3]) b_74_5 = get_level(table.row_values(12)[3]) b_74_6 = get_level(table.row_values(13)[3]) b_74_7 = get_level(table.row_values(14)[3]) b_74_8 = get_level(table.row_values(15)[3]) # b_75_1 = table.row_values(8)[5] # b_75_2 = table.row_values(9)[5] # b_75_3 = table.row_values(10)[5] # b_75_4 = table.row_values(11)[5] # b_75_5 = table.row_values(12)[5] # b_75_6 = table.row_values(13)[5] # b_75_7 = table.row_values(14)[5] # b_75_8 = table.row_values(15)[5] b_75_1 = \u0026#39;需进行小修保养\u0026#39; b_75_2 = \u0026#39;需进行小修保养\u0026#39; b_75_3 = \u0026#39;需进行小修保养\u0026#39; b_75_4 = \u0026#39;需进行小修保养\u0026#39; b_75_5 = \u0026#39;需进行小修保养\u0026#39; b_75_6 = \u0026#39;需进行小修保养\u0026#39; b_75_7 = \u0026#39;需进行小修保养\u0026#39; b_75_8 = \u0026#39;需进行小修保养\u0026#39; b_76_1 = get_next_year(table.row_values(8)[0]) b_76_2 = get_next_year(table.row_values(9)[0]) b_76_3 = get_next_year(table.row_values(10)[0]) b_76_4 = get_next_year(table.row_values(11)[0]) b_76_5 = get_next_year(table.row_values(12)[0]) b_76_6 = get_next_year(table.row_values(13)[0]) b_76_7 = get_next_year(table.row_values(14)[0]) b_76_8 = get_next_year(table.row_values(15)[0]) table = xl.sheet_by_name(xl.sheet_names()[2]) b_91 = table.row_values(15)[4] b_92 = table.row_values(15)[9] b_93 = str(xldate_as_datetime(table.row_values(15)[20], 0).strftime(\u0026#39;%Y/%m/%d\u0026#39;)) # 以下为填充模板中对应的域， doc.merge(title=title, a_0=remvocePiont(a_0), b_1=remvocePiont(b_1), b_2=remvocePiont(b_2), b_3=remvocePiont(b_3), b_4=remvocePiont(b_4), b_5=remvocePiont(b_5), b_6=remvocePiont(b_6), b_7=remvocePiont(b_7), b_8=remvocePiont(b_8), b_9=remvocePiont(b_9), b_10=remvocePiont(b_10), b_11=remvocePiont(b_11), b_12=remvocePiont(b_12), b_13=remvocePiont(b_13), b_14=remvocePiont(b_14), b_15=remvocePiont(b_15), b_16=remvocePiont(b_16), b_17=remvocePiont(b_17), b_18=remvocePiont(b_18), b_19=remvocePiont(b_19), b_20=remvocePiont(b_20), b_21=remvocePiont(b_21), b_22=remvocePiont(b_22), b_23=remvocePiont(b_23), b_24=remvocePiont(b_24), b_25=remvocePiont(b_25), b_26=remvocePiont(b_26), b_27=remvocePiont(b_27), b_28=remvocePiont(b_28), b_29=remvocePiont(b_29), b_30=remvocePiont(b_30), b_31=remvocePiont(b_31), b_32=remvocePiont(b_32), b_33=remvocePiont(b_33), b_34=remvocePiont(b_34), b_35=remvocePiont(b_35), b_36=remvocePiont(b_36), b_37=remvocePiont(b_37), b_38=remvocePiont(b_38), b_39=remvocePiont(b_39), b_40=remvocePiont(b_40), b_41=remvocePiont(b_41), b_42=remvocePiont(b_42), b_43=remvocePiont(b_43), b_44=remvocePiont(b_44), b_45=remvocePiont(b_45), b_46=remvocePiont(b_46), b_47=remvocePiont(b_47), b_48=remvocePiont(b_48), b_49=remvocePiont(b_49), b_50=remvocePiont(b_50), b_51=remvocePiont(b_51), b_52=remvocePiont(b_52), b_53=remvocePiont(b_53), b_54=remvocePiont(b_54), b_55=remvocePiont(b_55), b_56=remvocePiont(b_56), b_57=remvocePiont(b_57), b_58=remvocePiont(b_58), b_59=remvocePiont(b_59), b_60=remvocePiont(b_60), b_61=remvocePiont(b_61), b_62=remvocePiont(b_62), b_63=remvocePiont(b_63), b_64=remvocePiont(b_64), b_65=remvocePiont(b_65), b_66=remvocePiont(b_66), b_67=remvocePiont(b_67), b_68=remvocePiont(b_68), b_69=remvocePiont(b_69), b_70=remvocePiont(b_70), b_71=remvocePiont(b_71), b_72_1 = remvocePiont(b_72_1), b_72_2 = remvocePiont(b_72_2), b_72_3 = remvocePiont(b_72_3), b_72_4 = remvocePiont(b_72_4), b_72_5 = remvocePiont(b_72_5), b_72_6 = remvocePiont(b_72_6), b_72_7 = remvocePiont(b_72_7), b_72_8 = remvocePiont(b_72_8), b_73_1 = remvocePiont(b_73_1), b_73_2 = remvocePiont(b_73_2), b_73_3 = remvocePiont(b_73_3), b_73_4 = remvocePiont(b_73_4), b_73_5 = remvocePiont(b_73_5), b_73_6 = remvocePiont(b_73_6), b_73_7 = remvocePiont(b_73_7), b_73_8 = remvocePiont(b_73_8), b_74_1 = remvocePiont(b_74_1), b_74_2 = remvocePiont(b_74_2), b_74_3 = remvocePiont(b_74_3), b_74_4 = remvocePiont(b_74_4), b_74_5 = remvocePiont(b_74_5), b_74_6 = remvocePiont(b_74_6), b_74_7 = remvocePiont(b_74_7), b_74_8 = remvocePiont(b_74_8), b_75_1 = remvocePiont(b_75_1), b_75_2 = remvocePiont(b_75_2), b_75_3 = remvocePiont(b_75_3), b_75_4 = remvocePiont(b_75_4), b_75_5 = remvocePiont(b_75_5), b_75_6 = remvocePiont(b_75_6), b_75_7 = remvocePiont(b_75_7), b_75_8 = remvocePiont(b_75_8), b_76_1 = remvocePiont(b_76_1), b_76_2 = remvocePiont(b_76_2), b_76_3 = remvocePiont(b_76_3), b_76_4 = remvocePiont(b_76_4), b_76_5 = remvocePiont(b_76_5), b_76_6 = remvocePiont(b_76_6), b_76_7 = remvocePiont(b_76_7), b_76_8 = remvocePiont(b_76_8), b_91 = remvocePiont(b_91), b_93 = b_93 ) # 使用文件名 日期名称 # path_name = r\u0026#39;D:\\Users\\Modesty\\Desktop\\工作\\out\u0026#39; path_name = r\u0026#39;D:\\desk\\zuoye\\1\u0026#39; file_name = path.split(\u0026#39;\\\\\u0026#39;)[-1].replace(\u0026#39;.xlsx\u0026#39;, \u0026#39;\u0026#39;) if not os.path.exists(path_name): os.makedirs(path_name) word_name = path_name +\u0026#34;\\\\\u0026#34;+ file_name + \u0026#39;.docx\u0026#39; doc.write(word_name) doc.close() get_img_from_excel(path) save_img_to_doc(path_name+\u0026#39;\\\\image1.jpeg\u0026#39;,path_name+\u0026#39;\\\\image2.jpeg\u0026#39;,word_name,word_name) print(\u0026#34;转换成功\u0026#34;) # time.sleep(5) ","permalink":"https://modesty258.github.io/posts/tech/execl%E8%BD%AC%E5%8C%96%E4%B8%BAword/","summary":"import os import xlrd import datetime import time from mailmerge import MailMerge from xlrd import xldate_as_datetime, xldate_as_tuple from docx import Document from docx.shared import Inches from docx.oxml.ns import qn from docx.enum.text import WD_ALIGN_PARAGRAPH def center_insert_img(doc, img1, img2): \u0026#34;\u0026#34;\u0026#34;插入图片\u0026#34;\u0026#34;\u0026#34; tables = doc.tables tab_2 = tables[0].rows[65].cells[30] ph_img2 = tab_2.paragraphs[0] run_img2 = ph_img2.add_run(\u0026#39;\u0026#39;) run_img2.add_picture(img2) tab_1 = tables[0].rows[65].cells[6] ph_img1 = tab_1.paragraphs[0] run_img1 = ph_img1.add_run(\u0026#39;\u0026#39;) run_img1.add_picture(img1) def save_img_to_doc(img1,img2,tpl_doc,res_doc): \u0026#34;\u0026#34;\u0026#34;把图片保存到doc文件中的指定位置\u0026#34;\u0026#34;\u0026#","title":"Execl转化为word"},{"content":"​\nyaml配置文件报错：could not find expected \u0026lsquo;:\u0026rsquo; 在cmd对个人博客进行操作的时候常常会产生这个报错，拿记事本打开发现这一行并没有什么错误，但是就是存在报错\n其实也很简单，就是文件格式的错误\nError: \u0026quot;E:\\Myblog\\qqq\\config.yaml:171:1\u0026quot;: failed to unmarshal YAML: yaml: line 171: could not find expected ':'\n这个是说没有发现冒号后面的内容，yml配置文件遇到“：”或者“-”后面必须留一个空格！\n但是有时明明有空格，最主要的编译器的问题\n放到专业的编译器去查看，最好带颜色的，报错很直观\nStartYear: 2020 # 底部开始年份 FilingNo: PublicSecurityIconLink： PublicNetworkSecurity: 我这里是中英文的问题，切换一下就好了。\n[! [rejected] master -\u0026gt; master (fetch first) 当使用命令git push origin master 是，就会产生报错\n! [rejected] master -\u0026gt; master (fetch first) error failed to push some refs to 其实这个问题就是你要push的仓库里面本来就有文件，而且这个文件不能被本地识别，push的时候就会产生报错，解决无非就两个办法\n方法一 将仓库中的文件删除\n方法二 将仓库的文件拉取下来\n并且与本地进行合并，并且再次上传\ngit fetch origin master 然后按照以下步骤进行合并： git pull origin master git add . git commit -m \u0026#39;your commit message\u0026#39; git push origin master 如果上述代码有问题，可以试试下面的\ngit fetch origin master:tmp git rebase tmp git push origin HEAD:master git branch -D tmp 方法三，强制上传 但是注意，这可能会将之前仓库的内容覆盖，导致消失\ngit push origin master --force git push origin master -f short of force 因为我是第一次建站，里面只有用于生成页面而存在的readme，我直接覆盖了，成功上传\n","permalink":"https://modesty258.github.io/posts/blog/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","summary":"​ yaml配置文件报错：could not find expected \u0026lsquo;:\u0026rsquo; 在cmd对个人博客进行操作的时候常常会产生这个报错，拿记事本打开发现这一行并没有什么错误，但是就是存在报错 其实也很简单，就是文件格式的错误 Error: \u0026quot;E:\\Myblog\\qqq\\config.yaml:171:1\u0026quot;: failed to unmarshal YAML: yaml: line 171: could not find expected ':' 这个是说没有发现冒号后面的内容，yml配置文件遇到“：”或者“-”后面必","title":"常见问题"},{"content":"1.基本头部信息修改 定位到文件：archetypes/default.md，添加如下代码\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} author: [\u0026#34;Sulv\u0026#34;] keywords: - categories: # 没有分类界面可以不填写 - tags: # 标签 - description: \u0026#34;\u0026#34; weight: slug: \u0026#34;\u0026#34; draft: false # 是否为草稿 comments: true # 本页面是否显示评论 reward: true # 打赏 mermaid: true #是否开启mermaid showToc: true # 显示目录 TocOpen: true # 自动展开目录 hidemeta: false # 是否隐藏文章的元信息，如发布日期、作者等 disableShare: true # 底部不显示分享栏 showbreadcrumbs: true #顶部显示路径 cover: image: \u0026#34;\u0026#34; #图片路径例如：posts/tech/123/123.png zoom: # 图片大小，例如填写 50% 表示原图像的一半大小 caption: \u0026#34;\u0026#34; #图片底部描述 alt: \u0026#34;\u0026#34; relative: false --- 这样的话以后每次生成文章可以直接利用cmd的命令：hugo new posts/tech/a.md\nposts/tech为地址，tech可以为空，会直接生成在content中\n","permalink":"https://modesty258.github.io/posts/blog/%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0/","summary":"1.基本头部信息修改 定位到文件：archetypes/default.md，添加如下代码 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} author: [\u0026#34;Sulv\u0026#34;] keywords: - categories: # 没有分类界面可以不填写 - tags: # 标签 - description: \u0026#34;\u0026#34; weight: slug: \u0026#34;\u0026#34; draft: false # 是否为草稿 comments: true # 本页面是否显示评论 reward: true # 打赏 mermaid: true #是否开启mermaid showToc: true # 显示目录 TocOpen: true #","title":"利用cmd生成文章"},{"content":"部署到github https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ 我是小垃圾\n问题 大体步骤已经很清晰了\n将文件放在public中，具体代码实现 hugo 这一步很重要创建public cd public 网站会将初始文件放在这个目录下 git init 初始化 git remote add origin git@github.com:username/username.github.io.git#关联git仓库，注意需要提前设置好ssh，可以百度 git add . 选择所有文件 git commit -m \u0026#34;test\u0026#34; 创造需要上传的文件 git push origin master 注意这一步，应该提前将master设置为网站的默认 符号格式 这里换行符有可能会有警告，如果强行\n关联仓库 利用ssh将自己电脑与自己的git仓库给关联，不然会导致无法上传文件。\n将master设为网站默认 打开setting\n将master设置为默认，这样网站才会加载刚才上传文件\n","permalink":"https://modesty258.github.io/posts/blog/%E8%BF%9E%E6%8E%A5github/","summary":"部署到github https://zz2summer.github.io/github-pages-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/ 我是小垃圾 问题 大体步骤已经很清晰了 将文件放在public中，具体代码实现 hugo 这一步很重要创建public cd public 网站会将初始文件放在这个目录下 git init 初始化 git remote add origin git@github.com:username/username.github.io.git#关联git仓","title":"连接GitHub"},{"content":"时间和名字都是对的，说明修改好了\n","permalink":"https://modesty258.github.io/posts/blog/test/","summary":"时间和名字都是对的，说明修改好了","title":"Test"},{"content":"","permalink":"https://modesty258.github.io/posts/tech/tech1/","summary":"","title":"Tech1"},{"content":"","permalink":"https://modesty258.github.io/posts/blog/blog/","summary":"","title":"Blog"},{"content":" 传文字 第一步 新建一个markdown文件在需要的分类下面，起好名字\n然后命名好格式\n利用源代码模式修改时间和标题等内容\n--- title: \u0026#34;如何生成一篇文章\u0026#34; date: 2022-05-05T00:18:23+08:00 lastmod: 2022-05-05T00:18:23+08:00 author: [\u0026#34;Sulv\u0026#34;] keywords: - categories: - tags: - blog description: \u0026#34;\u0026#34; weight: slug: \u0026#34;\u0026#34; draft: false # 是否为草稿 comments: true reward: false # 打赏 mermaid: true #是否开启mermaid showToc: true # 显示目录 TocOpen: true # 自动展开目录 hidemeta: false # 是否隐藏文章的元信息，如发布日期、作者等 disableShare: true # 底部不显示分享栏 showbreadcrumbs: true #顶部显示路径 cover: image: \u0026#34;\u0026#34; #图片路径例如：posts/tech/123/123.png caption: \u0026#34;\u0026#34; #图片底部描述 alt: \u0026#34;\u0026#34; relative: false --- 偷偷：我也不知道上面是什么语言，总之复制过去就行了\n第二步 写文章\n传图片 在文章里面使用本地图片的方式： 比如我在content/posts/tech/下有一篇文章叫做 golang_base.md，那么在和该文章同一目录下新建一个文件夹叫做 golang_base，里面放图片如叫做 picture.png 的图片，那么在golang_base.md里面调用的时候可以这样写: ![](picture.png)\n仅用于这一主题，其他主体参照作者文档。\n","permalink":"https://modesty258.github.io/posts/blog/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/","summary":"传文字 第一步 新建一个markdown文件在需要的分类下面，起好名字 然后命名好格式 利用源代码模式修改时间和标题等内容 --- title: \u0026#34;如何生成一篇文章\u0026#34; date: 2022-05-05T00:18:23+08:00 lastmod: 2022-05-05T00:18:23+08:00 author: [\u0026#34;Sulv\u0026#34;] keywords: - categories: - tags: - blog description: \u0026#34;\u0026#34; weight: slug: \u0026#34;\u0026#34; draft: false # 是否为草稿 comments: true reward: false # 打赏 mermaid: true #是否开启mermaid showToc: true # 显示目录 TocOpen: true # 自动展开目录","title":"如何生成一篇文章"},{"content":"","permalink":"https://modesty258.github.io/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://modesty258.github.io/posts/read/read/","summary":"","title":"Read"},{"content":"read,hahahaha dididi\nshanghongliou\n","permalink":"https://modesty258.github.io/posts/web/web/","summary":"read,hahahaha dididi shanghongliou","title":"Web"},{"content":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 \u0026lt;/div\u0026gt; ","permalink":"https://modesty258.github.io/posts/tech/tech/","summary":"\u0026lt;div\u0026gt; 科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代码 科技代","title":"Tech"},{"content":" Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 787018782\n","permalink":"https://modesty258.github.io/links/","summary":"Sulv\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Sulv\u0026rsquo;s Blog 网址： https://www.sulvblog.cn 图标： https://www.sulvblog.cn/img/Q.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 787018782","title":"🤝友链"},{"content":"关于我\n英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山 ","permalink":"https://modesty258.github.io/about/","summary":"关于我 英文名: Kevin Xu 职业: 程序员 运动: 跑步、乒乓球、爬山","title":"🙋🏻‍♂️关于"}]